generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  username           String               @unique
  password           String
  id                 Int                  @id @default(autoincrement())
  otpCode            String? // Store the OTP code
  otpExpiresAt       DateTime? // Expiration time for the OTP
  isVerified         Boolean              @default(false) // Track if the user is verified
  posts              Blog[]
  BlogInteraction    BlogInteraction[]
  Comment            Comment[]
  CommentInteraction CommentInteraction[]
  details            Details?
}

model Blog {
  title            String
  content          String
  published        Boolean           @default(false)
  id               Int               @id @default(autoincrement())
  authorId         Int
  subtitle         String            @default("")
  time             DateTime          @default(now())
  thumbnailUrl     String?
  author           User              @relation(fields: [authorId], references: [id])
  blogInteractions BlogInteraction[]
  comments         Comment[]
}

model Details {
  userId     Int     @id
  name       String?
  profession String?
  about      String?
  profileUrl String?
  location   String?
  company    String?
  instagram  String? @default("https://instagram.com")
  linkedin   String? @default("https://linked.com")
  x          String? @default("https://x.com")
  user       User    @relation(fields: [userId], references: [id])
}

model BlogInteraction {
  id        Int      @id @default(autoincrement())
  userId    Int
  blogId    Int
  createdAt DateTime @default(now())
  isLiked   Boolean?
  blog      Blog     @relation(fields: [blogId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, blogId])
}

model Comment {
  id                   Int                  @id @default(autoincrement())
  userId               Int
  content              String
  createdAt            DateTime             @default(now())
  blogId               Int
  parentId             Int?
  totalCommentDislikes Int                  @default(0)
  totalCommentLikes    Int                  @default(0)
  blog                 Blog                 @relation(fields: [blogId], references: [id])
  parent               Comment?             @relation("Replies", fields: [parentId], references: [id])
  replies              Comment[]            @relation("Replies")
  user                 User                 @relation(fields: [userId], references: [id])
  interactions         CommentInteraction[]
}

model CommentInteraction {
  id        Int      @id @default(autoincrement())
  userId    Int
  commentId Int
  createdAt DateTime @default(now())
  isLiked   Boolean?
  comment   Comment  @relation(fields: [commentId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, commentId])
}
